{
  "Code":{
    "ga.duacord.duacord.Client.Constant.API":"local API = {}\r\n\r\nAPI.BASE_URL = \"https://discord.com/\"\r\nAPI.API_VERSION = \"9\"\r\nAPI.API_VERSION_PATH = string.format(\"v%s\", API.API_VERSION)\r\nAPI.API_URL = string.format(\"%sapi/%s\", API.BASE_URL, API.API_VERSION_PATH)\r\n\r\n\r\nreturn API",
    "ga.duacord.duacord.Main":"return {\n    Client = Import(\"ga.duacord.duacord.Client.Client\")\n}\n",
    "ga.duacord.duacord.Client.SubClasses.Objects.Message":"local Message = Class:extend()\r\nlocal ReMap = Import(\"ga.duacord.duacord.API.ReMap\")\r\n\r\nlocal HttpConstant = Import(\"ga.duacord.duacord.Constants.HTTP\")\r\n\r\nMessage.ClassMap = {\r\n    [\"Id\"] = \"id\",\r\n    [\"Type\"] = \"type\",\r\n    [\"Guild_id\"] = \"guild_id\",\r\n    [\"Position\"] = \"position\",\r\n    [\"Permission_overwrites\"] = \"permission_overwrites\",\r\n    [\"Name\"] = \"name\",\r\n    [\"Topic\"] = \"topic\",\r\n    [\"Nsfw\"] = \"nsfw\",\r\n    [\"Last_message_id\"] = \"last_message_id\",\r\n    [\"Bitrate\"] = \"bitrate\",\r\n    [\"User_limit\"] = \"user_limit\",\r\n    [\"Rate_limit_per_user\"] = \"rate_limit_per_user\",\r\n    [\"Recipients\"] = \"recipients\",\r\n    [\"Icon\"] = \"icon\",\r\n    [\"Owner_id\"] = \"owner_id\",\r\n    [\"Application_id\"] = \"application_id\",\r\n    [\"Parent_id\"] = \"parent_id\",\r\n    [\"Last_pin_timestamp\"] = \"last_pin_timestamp\",\r\n    [\"Rtc_region\"] = \"rtc_region\",\r\n    [\"Video_quality_mode\"] = \"video_quality_mode\",\r\n    [\"Message_count\"] = \"message_count\",\r\n    [\"Member_count\"] = \"member_count\",\r\n    [\"Thread_metadata\"] = \"thread_metadata\",\r\n    [\"Member\"] = \"member\",\r\n    [\"Default_auto_archive_duration\"] = \"default_auto_archive_duration\",\r\n    [\"Permissions\"] = \"permissions\",\r\n}\r\n\r\nfunction Message:initialize(Data, Guild)\r\n    self.Guild = Guild\r\n    self.Client = Guild.Client\r\n\r\n    ReMap(self, Data)\r\n\r\nend\r\n\r\nfunction Message:Edit(Data, AuditReason)\r\n    Data = Data or {}\r\n\r\n    local Response, Body = self.Guild.Client.API:Request(\r\n        \"PATCH\",\r\n        HttpConstant.BASEURL .. string.format(HttpConstant.EndPoints.CHANNEL, self.Id),\r\n        Data,\r\n        AuditReason\r\n    )\r\n\r\n    return Response.code == 200, Body.message\r\nend\r\n\r\n\r\n\r\n\r\nreturn Message",
    "ga.duacord.duacord.Client.Constant.EndPoints":"return {\r\n\tCHANNEL                       = \"/channels/%s\",\r\n\tCHANNEL_INVITES               = \"/channels/%s/invites\",\r\n\tCHANNEL_MESSAGE               = \"/channels/%s/messages/%s\",\r\n\tCHANNEL_MESSAGES              = \"/channels/%s/messages\",\r\n\tCHANNEL_MESSAGES_BULK_DELETE  = \"/channels/%s/messages/bulk-delete\",\r\n\tCHANNEL_MESSAGE_REACTION      = \"/channels/%s/messages/%s/reactions/%s\",\r\n\tCHANNEL_MESSAGE_REACTIONS     = \"/channels/%s/messages/%s/reactions\",\r\n\tCHANNEL_MESSAGE_REACTION_ME   = \"/channels/%s/messages/%s/reactions/%s/@me\",\r\n\tCHANNEL_MESSAGE_REACTION_USER = \"/channels/%s/messages/%s/reactions/%s/%s\",\r\n\tCHANNEL_PERMISSION            = \"/channels/%s/permissions/%s\",\r\n\tCHANNEL_PIN                   = \"/channels/%s/pins/%s\",\r\n\tCHANNEL_PINS                  = \"/channels/%s/pins\",\r\n\tCHANNEL_RECIPIENT             = \"/channels/%s/recipients/%s\",\r\n\tCHANNEL_TYPING                = \"/channels/%s/typing\",\r\n\tCHANNEL_WEBHOOKS              = \"/channels/%s/webhooks\",\r\n\tGATEWAY                       = \"/gateway\",\r\n\tGATEWAY_BOT                   = \"/gateway/bot\",\r\n\tGUILD                         = \"/guilds/%s\",\r\n\tGUILDS                        = \"/guilds\",\r\n\tGUILD_AUDIT_LOGS              = \"/guilds/%s/audit-logs\",\r\n\tGUILD_BAN                     = \"/guilds/%s/bans/%s\",\r\n\tGUILD_BANS                    = \"/guilds/%s/bans\",\r\n\tGUILD_CHANNELS                = \"/guilds/%s/channels\",\r\n\tGUILD_EMBED                   = \"/guilds/%s/embed\",\r\n\tGUILD_EMOJI                   = \"/guilds/%s/emojis/%s\",\r\n\tGUILD_EMOJIS                  = \"/guilds/%s/emojis\",\r\n\tGUILD_INTEGRATION             = \"/guilds/%s/integrations/%s\",\r\n\tGUILD_INTEGRATIONS            = \"/guilds/%s/integrations\",\r\n\tGUILD_INTEGRATION_SYNC        = \"/guilds/%s/integrations/%s/sync\",\r\n\tGUILD_INVITES                 = \"/guilds/%s/invites\",\r\n\tGUILD_MEMBER                  = \"/guilds/%s/members/%s\",\r\n\tGUILD_MEMBERS                 = \"/guilds/%s/members\",\r\n\tGUILD_MEMBER_ME_NICK          = \"/guilds/%s/members/@me/nick\",\r\n\tGUILD_MEMBER_ROLE             = \"/guilds/%s/members/%s/roles/%s\",\r\n\tGUILD_PRUNE                   = \"/guilds/%s/prune\",\r\n\tGUILD_REGIONS                 = \"/guilds/%s/regions\",\r\n\tGUILD_ROLE                    = \"/guilds/%s/roles/%s\",\r\n\tGUILD_ROLES                   = \"/guilds/%s/roles\",\r\n\tGUILD_WEBHOOKS                = \"/guilds/%s/webhooks\",\r\n\tINVITE                        = \"/invites/%s\",\r\n\tOAUTH2_APPLICATION_ME         = \"/oauth2/applications/@me\",\r\n\tUSER                          = \"/users/%s\",\r\n\tUSER_ME                       = \"/users/@me\",\r\n\tUSER_ME_CHANNELS              = \"/users/@me/channels\",\r\n\tUSER_ME_CONNECTIONS           = \"/users/@me/connections\",\r\n\tUSER_ME_GUILD                 = \"/users/@me/guilds/%s\",\r\n\tUSER_ME_GUILDS                = \"/users/@me/guilds\",\r\n\tVOICE_REGIONS                 = \"/voice/regions\",\r\n\tWEBHOOK                       = \"/webhooks/%s\",\r\n\tWEBHOOK_TOKEN                 = \"/webhooks/%s/%s\",\r\n\tWEBHOOK_TOKEN_GITHUB          = \"/webhooks/%s/%s/github\",\r\n\tWEBHOOK_TOKEN_SLACK           = \"/webhooks/%s/%s/slack\",\r\n}",
    "ga.duacord.duacord.Client.SubClasses.Objects.Role":"local Role = Class:extend()\r\nlocal ReMap = Import(\"ga.duacord.duacord.API.ReMap\")\r\n\r\nlocal HttpConstant = Import(\"ga.duacord.duacord.Constants.HTTP\")\r\n\r\nRole.ClassMap = {\r\n    [\"Id\"] = \"id\",\r\n    [\"Name\"] = \"name\",\r\n    [\"Color\"] = \"color\",\r\n    [\"Hoist\"] = \"Hoist\",\r\n    [\"Icon\"] = \"icon\",\r\n    [\"UnicodeEmoji\"] = \"unicode_emoji\",\r\n    [\"Position\"] = \"position\",\r\n    [\"Permissions\"] = \"permissions\",\r\n    [\"Managed\"] = \"managed\",\r\n    [\"Mentionable\"] = \"mentionable\",\r\n    [\"Tags\"] = \"tags\",\r\n}\r\n\r\nfunction Role:initialize(Data, Guild)\r\n    self.Guild = Guild\r\n    self.Client = self.Guild.Client\r\n\r\n    self.Client.API:RemapClass(self, Data)\r\nend\r\n\r\nfunction Role.meta:__tostring()\r\n    return \"Role: \" .. self.Id .. \" (\" .. self.Name .. \")\"\r\nend\r\n\r\nfunction Role:Update(Data)\r\n    self.Id = Data.id\r\n    self.Name = Data.name\r\n    self.Color = Data.color\r\n    self.Hoist = Data.Hoist\r\n    self.Icon = Data.icon\r\n    self.UnicodeEmoji = Data.unicode_emoji\r\n    self.Position = Data.position\r\n    self.Permissions = Data.permissions\r\n    self.Managed = Data.managed\r\n    self.Mentionable = Data.mentionable\r\n    self.Tags = Data.tags\r\nend\r\n\r\nfunction Role:Edit(Data, AuditReason)\r\n    Data = Data or {}\r\n\r\n    local Response, Body = self.Guild.Client.API:Request(\r\n        \"PATCH\",\r\n        HttpConstant.BASEURL .. string.format(HttpConstant.EndPoints.GUILD_ROLE, self.Guild.Id, self.Id),\r\n        Data,\r\n        AuditReason\r\n    )\r\n\r\n    return Response.code == 200, Body.message\r\nend\r\n\r\nfunction Role:Delete(Reason)\r\n    local Response, Body = self.Guild.Client.API:Request(\r\n        \"DELETE\",\r\n        HttpConstant.BASEURL .. string.format(HttpConstant.EndPoints.GUILD_ROLE, self.Guild.Id, self.Id),\r\n        {},\r\n        Reason\r\n    )\r\n\r\n    Body = Body or {}\r\n    return Response.code == 204, Body.message\r\n\r\nend\r\n\r\nfunction Role:SetMentioning(Enable, Reason)\r\n    return self:Edit({mentionable = Enable}, Reason)\r\nend\r\n\r\nfunction Role:SetHoist(Enable, Reason)\r\n    return self:Edit({hoist = Enable}, Reason)\r\nend\r\n\r\n\r\nfunction Role:SetColor(Color, Reason)\r\n    return self:Edit({color = Color}, Reason)\r\nend\r\n\r\nfunction Role:SetName(Name, Reason)\r\n    return self:Edit({name = Name}, Reason)\r\nend\r\n\r\n\r\n\r\nreturn Role ",
    "ga.duacord.duacord.Client.SubClasses.API.GatewayBot":"\r\nreturn function (Client)\r\n    local Constants = Client.Constants\r\n\r\n    local Response, Data = Client.API:RequestJson(\r\n        \"GET\",\r\n        Constants.API.API_URL .. Constants.EndPoints.GATEWAY_BOT,\r\n        {}\r\n    )\r\n\r\n    return Data\r\nend",
    "ga.duacord.duacord.Client.Constant.Opcodes":"return {\r\n    WEBSOCKET = {\r\n        TEXT   = 1,\r\n        BINARY = 2,\r\n        CLOSE  = 8,\r\n    },\r\n    DISCORD = {\r\n        DISPATCH = 0,\r\n        HEARTBEAT = 1,\r\n        IDENTIFY = 2,\r\n        PRESENCE_UPDATE = 3,\r\n        VOICE_STATE_UDPATE = 4,\r\n        RESUME = 6,\r\n        RECONNECT = 7,\r\n        REQUEST_GUILD_MEMBERS = 8,\r\n        INVALID_SESSION = 9,\r\n        HELLO = 10,\r\n        HEARTBEAT_ACK = 11\r\n    }\r\n}",
    "ga.duacord.duacord.Test":"local Package = {}\r\n\r\nfunction Package.OnInitialize()\r\n\r\n    local Client = Import(\"ga.duacord.duacord.Main\").Client:new({Debug = true})\r\n    local Token = FS.readFileSync(\"../Token\")\r\n\r\n    Client:Run(Token)\r\n\r\nend\r\n\r\nreturn Package\r\n",
    "ga.duacord.duacord.Load":"LoadPackage(\"./Libraries/Http.dua\")\r\nLoadPackage(\"./Libraries/Logger.dua\")",
    "ga.duacord.duacord.Client.SubClasses.Objects.User":"local User = Class:extend()\r\n\r\nlocal HttpConstant = Import(\"ga.duacord.duacord.Constants.HTTP\")\r\n\r\nUser.ClassMap = {\r\n    [\"Id\"]              = \"id\",\r\n    [\"Username\"]        = \"username\",\r\n    [\"Discriminator\"]   = \"discriminator\",\r\n    [\"Avatar\"]          = \"avatar\",\r\n    [\"Bot\"]             = \"bot\",\r\n    [\"System\"]          = \"system\",\r\n    [\"MfaEnabled\"]      = \"mfa_enabled\",\r\n    [\"Banner\"]          = \"banner\",\r\n    [\"AccentColor\"]     = \"accent_color\",\r\n    [\"Locale\"]          = \"locale\",\r\n    [\"Flags\"]           = \"flags\",\r\n    [\"PremiumType\"]     = \"premium_type\",\r\n    [\"PublicFlags\"]     = \"public_flags\",\r\n}\r\n\r\nfunction User:initialize(Data, Member)\r\n    self.Member = Member\r\n    self.Client = self.Member.Client\r\n\r\n    self.Client.API:RemapClass(self, Data)\r\nend\r\n\r\nfunction User:Edit(Data, AuditReason)\r\n    Data = Data or {}\r\n\r\n    local Response, Body = self.Guild.Client.API:Request(\r\n        \"PATCH\",\r\n        HttpConstant.BASEURL .. string.format(HttpConstant.EndPoints.GUILD_MEMBER, self.Guild.Id, self.Id),\r\n        Data,\r\n        AuditReason\r\n    )\r\n\r\n    return Response.code == 200, Body.message\r\nend\r\n\r\n\r\nreturn User ",
    "ga.duacord.duacord.Client.SubClasses.API.ReMap":"return function (Class, Data, DoPrint)\r\n\r\n    local Client = Class.Client\r\n\r\n    for Index, MapName in pairs(Class.ClassMap) do\r\n\r\n        if DoPrint == true then\r\n            p(Index)\r\n            p(MapName)\r\n            p(Data[MapName])\r\n            p()\r\n        end\r\n        \r\n        Class[Index] = Data[MapName] or Class[Index]\r\n    end\r\n\r\n\r\nend",
    "ga.duacord.duacord.Client.Client":"local Client = Import(\"nl.cubic-inc.logger.Main\"):extend()\r\n\r\nClient.Constants = {\r\n    EndPoints = Import(\"ga.duacord.duacord.Client.Constant.EndPoints\"),\r\n    API = Import(\"ga.duacord.duacord.Client.Constant.API\"),\r\n    Opcodes = Import(\"ga.duacord.duacord.Client.Constant.Opcodes\")\r\n}\r\n\r\nClient.Classes = {\r\n    API = Import(\"ga.duacord.duacord.Client.SubClasses.API.API\"),\r\n    Shard = Import(\"ga.duacord.duacord.Client.SubClasses.Shard\"),\r\n    EventHandler = Import(\"ga.duacord.duacord.Client.SubClasses.EventHandler\"),\r\n\r\n    Objects = {\r\n        Channel = Import(\"ga.duacord.duacord.Client.SubClasses.Objects.Channel\"),\r\n        Guild = Import(\"ga.duacord.duacord.Client.SubClasses.Objects.Guild\"),\r\n        Member = Import(\"ga.duacord.duacord.Client.SubClasses.Objects.Member\"),\r\n        Message = Import(\"ga.duacord.duacord.Client.SubClasses.Objects.Message\"),\r\n        Role = Import(\"ga.duacord.duacord.Client.SubClasses.Objects.Role\"),\r\n        User = Import(\"ga.duacord.duacord.Client.SubClasses.Objects.User\")\r\n    }\r\n}\r\n\r\nfunction Client:initialize(Settings)\r\n    self.API = self.Classes.API:new(self)\r\n    self.EventHandler = self.Classes.EventHandler:new(self)\r\n    self.Shards = {}\r\n    self.Guilds = {}\r\n\r\n    self.DebugMode = Settings.Debug or false\r\nend\r\n\r\nfunction Client:Run(Token)\r\n    self.Token = \"Bot \" .. Token\r\n    local GatewayInfo = self.API:GatewayBot()\r\n\r\n    self:Info(\"Duacord \" .. LoadedPackages[\"duacord-main\"].PackageInfo.Version)\r\n    self:Info(GatewayInfo.shards .. \" Shards\")\r\n    self:Info(\r\n        string.format(\r\n            \"%s/%s Starts Remaining\",\r\n            GatewayInfo.session_start_limit.remaining -1,\r\n            GatewayInfo.session_start_limit.total\r\n        )\r\n    )\r\n\r\n    for i = 1, GatewayInfo.shards do\r\n        self.Shards[i] = self.Classes.Shard:new(self, i - 1)\r\n    end\r\n\r\n    self:Info(\"Connecting to discord...\")\r\n\r\n    for Index, Shard in pairs(self.Shards) do\r\n        Shard:Connect(GatewayInfo)\r\n    end\r\nend\r\n\r\nreturn Client",
    "ga.duacord.duacord.Client.SubClasses.Shard":"local Shard = Class:extend()\r\n\r\nlocal Socket = Import(\"ga.duacord.http.Main\")[\"coro-websocket\"]\r\nlocal SetInterval = Timer.setInterval\r\n\r\nfunction Shard:initialize(Client, Id)\r\n    self.Client = Client\r\n    self.Heart = {}\r\n    self.Id = Id\r\nend\r\n\r\nlocal function GetConnection(Url, Path)\r\n    local Options = Socket.parseUrl(Url)\r\n    Options.pathname = Path\r\n    \r\n    return Socket.connect(Options)\r\nend\r\n\r\nfunction Shard:Identify()\r\n    self:Send(\r\n        self.Client.Constants.Opcodes.DISCORD.IDENTIFY,\r\n        {\r\n            token = self.Client.Token,\r\n            properties = {\r\n                [\"$os\"] = LOS.type(),\r\n                [\"$browser\"] = \"DuaCord\",\r\n                [\"$device\"] = \"DuaCord\"\r\n            },\r\n            shard = {self.Id, #self.Client.Shards},\r\n            intents = 32767\r\n        },\r\n        true\r\n    )\r\nend\r\n\r\nlocal function Beat(Shard)\r\n    Shard:HeartBeat()\r\nend\r\n\r\nfunction Shard:HeartBeat()\r\n    coroutine.wrap(function ()\r\n        self:Send(self.Client.Constants.Opcodes.DISCORD.HEARTBEAT, self.Sequence or Json.null)\r\n        self.Client:Debug(\"HeartBeat Send\")\r\n    end)()\r\nend\r\n\r\nfunction Shard:HandleText(Message)\r\n    local DiscordOpcodes = self.Client.Constants.Opcodes.DISCORD\r\n\r\n    if Message.op == DiscordOpcodes.DISPATCH then\r\n        self.Client.EventHandler:Handle(Message, self)\r\n    elseif Message.op == DiscordOpcodes.HELLO then\r\n        self.Client:Info(\"Recieved hello!\")\r\n        self.Heart.Speed = Message.d.heartbeat_interval\r\n        self.Client:Debug(\"Heart Speed set to \" .. self.Heart.Speed)\r\n        self.Heart.Beat = SetInterval(self.Heart.Speed, Beat, self)\r\n        self:HeartBeat()\r\n        self:Identify()\r\n        self.Client:emit(\"Hello\")\r\n    end\r\n    \r\nend\r\n\r\nfunction Shard:HandleMessage(Message)\r\n    local Opcodes = self.Client.Constants.Opcodes\r\n\r\n    local Opcode = Message.opcode\r\n    local Payload = Message.payload\r\n\r\n    if Opcode == Opcodes.WEBSOCKET.TEXT then\r\n        self:HandleText(Json.decode(Message.payload))\r\n        return true\r\n    end\r\nend\r\n\r\nfunction Shard:Connect(ConnectionData)\r\n    local Response, Read, Write = GetConnection(\r\n        ConnectionData.url,\r\n        string.format(\r\n            \"/?v=%s&encoding=json\",\r\n            self.Client.Constants.API.API_VERSION\r\n        )\r\n    )\r\n\r\n    self.Read = Read\r\n    self.Write = Write\r\n\r\n    for Message in self.Read do\r\n        local Keep = self:HandleMessage(Message)\r\n        if not Keep then self.Client:Debug(Message.payload) break end\r\n    end\r\n\r\n    self.Client:Info(\"Disconnected\")\r\n\r\nend\r\n\r\nfunction Shard:Send(Opcode, Data, Identify)\r\n    if self.Write then\r\n        self.Write(\r\n            {\r\n                opcode = self.Client.Constants.Opcodes.WEBSOCKET.TEXT,\r\n                payload = Json.encode(\r\n                    {\r\n                        d = Data,\r\n                        op = Opcode\r\n                    }\r\n                )\r\n            }\r\n        )\r\n    end\r\nend\r\n\r\nreturn Shard",
    "ga.duacord.duacord.Client.SubClasses.API.RequestJson":"local Request = Import(\"ga.duacord.http.Main\")[\"coro-http\"].request\r\n\r\nreturn function (Method, Url, Headers, Tbl, Tk, Client)\r\n\r\n    Headers = Headers or {}\r\n\r\n    if Tbl then\r\n        local Body = Json.encode(Tbl)\r\n        table.insert(Headers, {\"content-length\", #Body})\r\n    end\r\n\r\n    table.insert(Headers, {\"content-type\", \"application/json\"})\r\n    if Tk ~= false then\r\n        table.insert(Headers, {\"Authorization\", Client.Token})\r\n    end\r\n\r\n    table.insert(\r\n        Headers,\r\n        {\r\n            \"user-agent\",\r\n            string.format(\r\n                \"DiscordBot (%s, %s)\",\r\n                \"https://github.com/Duacord/Duacord-Main\",\r\n                LoadedPackages[\"duacord-main\"].PackageInfo.Version\r\n            )\r\n        }\r\n    )\r\n\r\n\r\n    local Response, Body = Request(Method, Url, Headers, Body)\r\n    return Response, Json.decode(Body)\r\n    \r\nend",
    "ga.duacord.duacord.Client.SubClasses.API.API":"local API = Class:extend()\r\n\r\nfunction API:initialize(Client)\r\n    self.Client = Client\r\nend\r\n\r\nfunction API:RequestJson(Method, Url, Headers, Body, Tk)\r\n    return Import(\"ga.duacord.duacord.Client.SubClasses.API.RequestJson\")(Method, Url, Headers, Body, Tk, self.Client)\r\nend\r\n\r\nfunction API:GatewayBot()\r\n    return Import(\"ga.duacord.duacord.Client.SubClasses.API.GatewayBot\")(self.Client)\r\nend\r\n\r\nfunction API:RemapClass(Class, Data, DoPrint)\r\n    return Import(\"ga.duacord.duacord.Client.SubClasses.API.ReMap\")(Class, Data, DoPrint)\r\nend\r\n\r\nreturn API",
    "ga.duacord.duacord.Client.SubClasses.Objects.Member":"local Member = Class:extend()\r\n\r\nlocal HttpConstant = Import(\"ga.duacord.duacord.Constants.HTTP\")\r\n\r\n\r\nfunction Member:initialize(Data, Guild)\r\n    self.Guild = Guild\r\n    self.Client = Guild.Client\r\n    \r\n    self.Nick = Data.nick\r\n    self.Avatar = Data.avatar\r\n    self.JoinedAt = Data.joined_at\r\n    self.PremiumSince = Data.premium_since\r\n    self.Deaf = Data.deaf\r\n    self.Mute = Data.mute\r\n    self.Pending = Data.pending\r\n    self.Permissions = Data.permissions\r\n\r\n\r\n    self.User = self.Client.Classes.Objects.User:new(Data.user, self)\r\n\r\n    self.Roles = {}\r\n    for Index, RoleId in pairs(Data.roles) do\r\n        self.Roles[RoleId] = self.Guild:GetRole(RoleId)\r\n    end\r\n\r\n\r\nend\r\n\r\nfunction Member:Edit(Data, AuditReason)\r\n    Data = Data or {}\r\n\r\n    local Response, Body = self.Guild.Client.API:Request(\r\n        \"PATCH\",\r\n        HttpConstant.BASEURL .. string.format(HttpConstant.EndPoints.GUILD_MEMBER, self.Guild.Id, self.Id),\r\n        Data,\r\n        AuditReason\r\n    )\r\n\r\n    return Response.code == 200, Body.message\r\nend\r\n\r\nfunction Member:SetNick(Name, Reason)\r\n    return self:Edit({nick = Name}, Reason)\r\nend\r\n\r\nfunction Member:SetMute(Enable, Reason)\r\n    return self:Edit({mute = Enable}, Reason)\r\nend\r\n\r\nfunction Member:SetDeaf(Enable, Reason)\r\n    return self:Edit({deaf = Enable}, Reason)\r\nend\r\n\r\nfunction Member:Move(ChannelId, Reason)\r\n    return self:Edit({channel_id = ChannelId}, Reason)\r\nend\r\n\r\nreturn Member ",
    "ga.duacord.duacord.Client.SubClasses.Objects.Guild":"local Guild = Class:extend()\r\n\r\nGuild.ClassMap = {\r\n    [\"Id\"]                              = \"id\",\r\n    [\"Name\"]                            = \"name\",\r\n    [\"Icon\"]                            = \"icon\",\r\n    --[\"IconHash\"]                        = \"icon_hash\",\r\n    [\"Splash\"]                          = \"splash\",\r\n    [\"DiscoverySplash\"]                 = \"discovery_splash\",\r\n    [\"Owner\"]                           = \"owner\",\r\n    [\"OwnerId\"]                         = \"owner_id\",\r\n    [\"Permissions\"]                     = \"permissions\",\r\n    [\"AfkChannelId\"]                    = \"afk_channel_id\",\r\n    [\"AfkTimeout\"]                      = \"afk_timeout\",\r\n    [\"WidgetEnabled\"]                   = \"widget_enabled\",\r\n    [\"WidgetChannelId\"]                 = \"widget_channel_id\",\r\n    [\"VerificationLevel\"]               = \"verification_level\",\r\n    [\"DefaultMessageNotifications\"]     = \"default_message_notifications\",\r\n    [\"ExplicitContentFilter\"]           = \"explicit_content_filter\",\r\n    [\"Emojis\"]                          = \"emojis\",\r\n    [\"Features\"]                        = \"features\",\r\n    [\"MfaLevel\"]                        = \"mfa_level\",\r\n    [\"SystemChannelId\"]                 = \"system_channel_id\",\r\n    [\"SystemChannelFlags\"]              = \"system_channel_flags\",\r\n    [\"RulesChannelId\"]                  = \"rules_channel_id\",\r\n    [\"JoinedAt\"]                        = \"joined_at\",\r\n    [\"Large\"]                           = \"large\",\r\n    [\"Unavailable\"]                     = \"unavailable\",\r\n    [\"MemberCount\"]                     = \"member_count\",\r\n    [\"VoiceStates\"]                     = \"voice_states\",\r\n    [\"Threads\"]                         = \"threads\",\r\n    [\"Presences\"]                       = \"presences\",\r\n    [\"MaxPresences\"]                    = \"max_presences\",\r\n    [\"MaxMembers\"]                      = \"max_members\",\r\n    [\"VanityUrlCode\"]                   = \"vanity_url_code\",\r\n    [\"Description\"]                     = \"description\",\r\n    [\"Banner\"]                          = \"banner\",\r\n    [\"PremiumTier\"]                     = \"premium_tier\",\r\n    [\"PremiumSubscriptionCount\"]        = \"premium_subscription_count\",\r\n    [\"PreferredLocale\"]                 = \"preferred_locale\",\r\n    [\"PublicUpdatesChannelId\"]          = \"public_updates_channel_id\",\r\n    [\"MaxVideoChannelUsers\"]            = \"max_video_channel_users\",\r\n    [\"WelcomeScreen\"]                   = \"welcome_screen\",\r\n    [\"NsfwLevel\"]                       = \"nsfw_level\",\r\n    [\"StageInstances\"]                  = \"stage_instances\",\r\n    [\"Stickers\"]                        = \"stickers\",\r\n}\r\n\r\nfunction Guild:initialize(Data, Client)\r\n\r\n    self.Client = Client\r\n\r\n    local Role = self.Client.Classes.Objects.Role\r\n    local Member = self.Client.Classes.Objects.Member\r\n    local Channel = self.Client.Classes.Objects.Channel\r\n\r\n\r\n    self.Client.API:RemapClass(self, Data)\r\n\r\n\r\n    self.Roles = {}\r\n    for Index, NewRole in pairs(Data.roles) do\r\n        self.Roles[NewRole.id] = Role:new(NewRole, self)\r\n    end\r\n\r\n    self.Members = {}\r\n    for Index, NewMember in pairs(Data.members) do\r\n        self.Members[NewMember.user.id] = Member:new(NewMember, self)\r\n    end\r\n\r\n    self.Channels = {} \r\n    for Index, NewChannel in pairs(Data.channels) do\r\n        self.Channels[NewChannel.id] = Channel:new(NewChannel, self)\r\n    end\r\n\r\n    for i, v in pairs(self.Roles) do print(i,v) end\r\n\r\nend\r\n\r\nfunction Guild.meta:__tostring()\r\n    return \"Guild: \" .. self.Id .. \" (\" .. self.Name .. \")\"\r\nend\r\n\r\nfunction Guild:GetRole(Id)\r\n    return self.Roles[Id]\r\nend\r\n\r\nfunction Guild:GetMember(Id)\r\n    return self.Members[Id]\r\nend\r\n\r\nfunction Guild:GetChannel(Id)\r\n    return self.Channels[Id]\r\nend\r\n\r\nreturn Guild",
    "ga.duacord.duacord.Client.SubClasses.Objects.Channel":"local Channel = Class:extend()\r\n\r\nlocal HttpConstant = Import(\"ga.duacord.duacord.Constants.HTTP\")\r\n\r\nChannel.ClassMap = {\r\n    [\"Id\"]                              = \"id\",\r\n    [\"Type\"]                            = \"type\",\r\n    [\"Position\"]                        = \"position\",\r\n    [\"PermissionOverwrites\"]            = \"permission_overwrites\",\r\n    [\"Name\"]                            = \"name\",\r\n    [\"Topic\"]                           = \"topic\",\r\n    [\"Nsfw\"]                            = \"nsfw\",\r\n    [\"LastMessageId\"]                   = \"last_message_id\",\r\n    [\"Bitrate\"]                         = \"bitrate\",\r\n    [\"UserLimit\"]                       = \"user_limit\",\r\n    [\"RateLimitPerUser\"]                = \"rate_limit_per_user\",\r\n    [\"Recipients\"]                      = \"recipients\",\r\n    [\"Icon\"]                            = \"icon\",\r\n    [\"OwnerId\"]                         = \"owner_id\",\r\n    [\"ApplicationId\"]                   = \"application_id\",\r\n    [\"ParentId\"]                        = \"parent_id\",\r\n    [\"LastPinTimestamp\"]                = \"last_pin_timestamp\",\r\n    [\"RtcRegion\"]                       = \"rtc_region\",\r\n    [\"VideoQualityMode\"]                = \"video_quality_mode\",\r\n    [\"MessageCount\"]                    = \"message_count\",\r\n    [\"MemberCount\"]                     = \"member_count\",\r\n    [\"ThreadMetadata\"]                  = \"thread_metadata\",\r\n    [\"Member\"]                          = \"member\",\r\n    [\"DefaultAutoArchiveDuration\"]      = \"default_auto_archive_duration\",\r\n    [\"Permissions\"]                     = \"permissions\",\r\n}\r\n\r\nfunction Channel:initialize(Data, Guild)\r\n    self.Guild = Guild\r\n    self.Client = Guild.Client\r\n\r\n    self.Client.API:RemapClass(self, Data)\r\nend\r\n\r\nfunction Channel:Edit(Data, AuditReason)\r\n    Data = Data or {}\r\n\r\n    local Response, Body = self.Guild.Client.API:Request(\r\n        \"PATCH\",\r\n        HttpConstant.BASEURL .. string.format(HttpConstant.EndPoints.CHANNEL, self.Id),\r\n        Data,\r\n        AuditReason\r\n    )\r\n\r\n    return Response.code == 200, Body.message\r\nend\r\n\r\nfunction Channel:SetTopic(Name, AuditReason)\r\n    return self:Edit({topic = Name})\r\nend\r\n\r\nfunction Channel:SetName(Name, AuditReason)\r\n    return self:Edit({name = Name})\r\nend\r\n\r\nfunction Channel:Send(Data)\r\n    local Response, Body = self.Guild.Client.API:Request(\r\n        \"POST\",\r\n        HttpConstant.BASEURL .. string.format(HttpConstant.EndPoints.CHANNEL_MESSAGES, self.Id),\r\n        Data\r\n    )\r\n\r\n    return Response.code == 200, Body.message\r\nend\r\n\r\n\r\nreturn Channel ",
    "ga.duacord.duacord.Client.SubClasses.EventHandler":"local EventHandler = Class:extend()\r\n\r\nEventHandler.Events = {}\r\n\r\nfunction EventHandler:initialize(Client)\r\n    self.Client = Client\r\nend\r\n\r\nfunction EventHandler.Events.READY(Client, Shard, Data)\r\n    print(Json.encode(Data, {indent = true}))\r\n    Shard.SessionId = Data.session_id\r\n    Client:Info(\"Recieved ready!\")\r\n    Client:emit(\"Ready\")\r\nend\r\n\r\nfunction EventHandler.Events.GUILD_CREATE(Client, Shard, Data)\r\n    Client.Guilds[Data.id] = Client.Classes.Objects.Guild:new(Data, Client)\r\nend\r\n\r\nfunction EventHandler:Handle(Data, Shard)\r\n\r\n    p(Data.t)\r\n    --print(Json.encode(Data.d, {indent = true}))\r\n    --p()\r\n    self.Client:emit(\"Raw\", Data) \r\n\r\n    if self.Events[Data.t] then\r\n        Shard.Sequence = Data.s\r\n        self.Events[Data.t](self.Client, Shard, Data.d)\r\n    else\r\n        self.Client:Warn(\"Unhandled gateway event: \" .. Data.t)\r\n    end\r\nend\r\n\r\nreturn EventHandler"
  },
  "PackageInfo":{
    "Author":{
      "Developers":["CoreByte"],
      "Contributors":[]
    },
    "Name":"Duacord Main",
    "Entrypoints":{
      "OnLoad":"ga.duacord.duacord.Load",
      "Main":"ga.duacord.duacord.Test"
    },
    "Dependencies":{
      "Luvit":[],
      "Dua":[]
    },
    "ID":"duacord-main",
    "Contact":{
      "Website":"http://duacord.ga",
      "Socials":[],
      "Source":"https://github.com/duacord"
    },
    "InfoVersion":1,
    "Version":"1.0.0",
    "Description":"Main Duacord Package"
  },
  "Resources":{
    "/package.info.lua":"cmV0dXJuIHsKCiAgICBJbmZvVmVyc2lvbiA9IDEsIC0tIERvbnQgdG91Y2ggdGhpcwoKICAgIElEID0gImR1YWNvcmQtbWFpbiIsIC0tIEEgdW5pcXVlIGlkIAogICAgVmVyc2lvbiA9ICIxLjAuMCIsIC0tIFRoZSBwYWNrYWdlIHZlcnNpb24KCiAgICBOYW1lID0gIkR1YWNvcmQgTWFpbiIsIC0tIFRoZSBuYW1lIG9mIHRoZSBwcm9qZWN0LCBjYW4gdXNlIHNwYWNlcwogICAgRGVzY3JpcHRpb24gPSAiTWFpbiBEdWFjb3JkIFBhY2thZ2UiLCAtLSBEZXNjcmlwdGlvbgoKICAgIEF1dGhvciA9IHsKICAgICAgICBEZXZlbG9wZXJzID0gewogICAgICAgICAgICAiQ29yZUJ5dGUiCiAgICAgICAgfSwKICAgICAgICBDb250cmlidXRvcnMgPSB7fQogICAgfSwKCiAgICBEZXBlbmRlbmNpZXMgPSB7CiAgICAgICAgTHV2aXQgPSB7fSwKICAgICAgICBEdWEgPSB7fQogICAgfSwKCiAgICBDb250YWN0ID0gewogICAgICAgIFdlYnNpdGUgPSAiaHR0cDovL2R1YWNvcmQuZ2EiLCAtLSBIb21lcGFnZQogICAgICAgIFNvdXJjZSA9ICJodHRwczovL2dpdGh1Yi5jb20vZHVhY29yZCIsIC0tIEdpdGh1YiByZXBybwogICAgICAgIFNvY2lhbHMgPSB7fQogICAgfSwKCiAgICBFbnRyeXBvaW50cyA9IHsKICAgICAgICBNYWluID0gImdhLmR1YWNvcmQuZHVhY29yZC5UZXN0IiwKICAgICAgICBPbkxvYWQgPSAiZ2EuZHVhY29yZC5kdWFjb3JkLkxvYWQiCiAgICAgICAgLS0gQ3VieVBhY2thZ2UgPSAic29tZS5vdGhlci5lbnRyeS5jYXVzZWQuYnkuYW5vdGhlci5wYWNrYWdlIiwgLS0gYSBwYWNrYWdlIGNhbiBjYWxsIGFub3RoZXIgcGFja2FnZXMgZW50cnlwb2ludHMKICAgIH0KCn0K"
  }
}