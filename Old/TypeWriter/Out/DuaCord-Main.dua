{
  "Resources":{
    "/package.info.lua":"cmV0dXJuIHsNCg0KICAgIEluZm9WZXJzaW9uID0gMSwgLS0gRG9udCB0b3VjaCB0aGlzDQoNCiAgICBJRCA9ICJEdWFDb3JkLU1haW4iLCAtLSBBIHVuaXF1ZSBpZCANCiAgICBWZXJzaW9uID0gIjAuMC4xIiwgLS0gVGhlIHBhY2thZ2UgdmVyc2lvbg0KDQogICAgTmFtZSA9ICJEdWFDb3JkLU1haW4iLCAtLSBUaGUgbmFtZSBvZiB0aGUgcHJvamVjdCwgY2FuIHVzZSBzcGFjZXMNCiAgICBEZXNjcmlwdGlvbiA9ICJUaGUgTWFpbiBEdWFDb3JkIFBhY2thZ2UiLCAtLSBEZXNjcmlwdGlvbg0KDQogICAgQXV0aG9yID0gew0KICAgICAgICBEZXZlbG9wZXJzID0gew0KICAgICAgICAgICAgIkNvcmVCeXRlIg0KICAgICAgICB9LA0KICAgICAgICBDb250cmlidXRvcnMgPSB7fQ0KICAgIH0sDQoNCiAgICBEZXBlbmRlbmNpZXMgPSB7DQogICAgICAgIEx1dml0ID0ge30sDQogICAgICAgIER1YSA9IHt9DQogICAgfSwNCg0KICAgIENvbnRhY3QgPSB7DQogICAgICAgIFdlYnNpdGUgPSAiaHR0cDovL2R1YWNvcmQuZ2EiLCAtLSBIb21lcGFnZQ0KICAgICAgICBTb3VyY2UgPSAiaHR0cHM6Ly9naXRodWIuY29tL0R1YUNvcmQvRHVhQ29yZC1NYWluIiwgLS0gR2l0aHViIHJlcHJvDQogICAgICAgIFNvY2lhbHMgPSB7fQ0KICAgIH0sDQoNCiAgICBJY29uID0gIiIsDQogICAgRW52aXJvbm1lbnQgPSAiKiIsDQogICAgRW50cnlwb2ludHMgPSB7DQogICAgICAgIE1haW4gPSAiZ2EuZHVhY29yZC5kdWFjb3JkLlRlc3QiLA0KICAgICAgICBPbkxvYWQgPSAiZ2EuZHVhY29yZC5kdWFjb3JkLk9uTG9hZCINCiAgICB9DQoNCn0NCg=="
  },
  "Code":{
    "ga.duacord.duacord.Classes.Member":"local Member = Class:extend()\r\n\r\nlocal HttpConstant = Import(\"ga.duacord.duacord.Constants.HTTP\")\r\n\r\n\r\nfunction Member:initialize(Data, Guild)\r\n    self.Guild = Guild\r\n    self.Client = Guild.Client\r\n    \r\n    self.Nick = Data.nick\r\n    self.Avatar = Data.avatar\r\n    self.JoinedAt = Data.joined_at\r\n    self.PremiumSince = Data.premium_since\r\n    self.Deaf = Data.deaf\r\n    self.Mute = Data.mute\r\n    self.Pending = Data.pending\r\n    self.Permissions = Data.permissions\r\n\r\n\r\n    self.User = self.Client.Classes.Classes.User:new(Data.user, self)\r\n\r\n    self.Roles = {}\r\n    for Index, RoleId in pairs(Data.roles) do\r\n        self.Roles[RoleId] = self.Guild:GetRole(RoleId)\r\n    end\r\n\r\n\r\nend\r\n\r\nfunction Member:Edit(Data, AuditReason)\r\n    Data = Data or {}\r\n\r\n    local Response, Body = self.Guild.Client.API:Request(\r\n        \"PATCH\",\r\n        HttpConstant.BASEURL .. string.format(HttpConstant.EndPoints.GUILD_MEMBER, self.Guild.Id, self.Id),\r\n        Data,\r\n        AuditReason\r\n    )\r\n\r\n    return Response.code == 200, Body.message\r\nend\r\n\r\nfunction Member:SetNick(Name, Reason)\r\n    return self:Edit({nick = Name}, Reason)\r\nend\r\n\r\nfunction Member:SetMute(Enable, Reason)\r\n    return self:Edit({mute = Enable}, Reason)\r\nend\r\n\r\nfunction Member:SetDeaf(Enable, Reason)\r\n    return self:Edit({deaf = Enable}, Reason)\r\nend\r\n\r\nfunction Member:Move(ChannelId, Reason)\r\n    return self:Edit({channel_id = ChannelId}, Reason)\r\nend\r\n\r\nreturn Member ",
    "ga.duacord.duacord.API.ReMap":"return function (Class, Data, DoPrint)\r\n\r\n    local Client = Class.Client\r\n\r\n    for Index, MapName in pairs(Class.ClassMap) do\r\n\r\n        if DoPrint == true then\r\n            p(Index)\r\n            p(MapName)\r\n            p(Data[MapName])\r\n            p()\r\n        end\r\n        \r\n        Class[Index] = Data[MapName] or Class[Index]\r\n    end\r\n\r\n\r\nend",
    "ga.duacord.duacord.Client.EventHandler":"local EventHandler = Class:extend()\r\nlocal ReMap = Import(\"ga.duacord.duacord.API.ReMap\")\r\n\r\nfunction EventHandler:initialize(Gateway)\r\n\r\n    self.Gateway = Gateway\r\n    self.Client = self.Gateway.Client\r\n\r\nend\r\n\r\nEventHandler.Events = {}\r\n\r\nfunction EventHandler.Events.READY(Client, Data)\r\n    Client.Logger:Info(\"Received Ready\")\r\n    Client.GuildCount = #Data.guilds\r\n    Client.User = Client.Classes.Classes.User:new(Data.user, Client)\r\n    Client.SessionId = Data.session_id\r\n\r\n    Client:emit(\"Ready\")\r\nend\r\n\r\nfunction EventHandler.Events.GUILD_CREATE(Client, Data)\r\n    Client.Logger:Info(\"Received Guilds\")\r\n    Client.Guilds[Data.id] = Client.Classes.Classes.Guild:new(Data, Client)\r\n\r\n    local GuildCount = 0\r\n\r\n    for Index, IndexedGuild in pairs(Client.Guilds) do\r\n        GuildCount = GuildCount + 1\r\n    end\r\n    \r\n    if GuildCount == Client.GuildCount then\r\n        Client:emit(\"Loaded\")\r\n    end\r\nend\r\n\r\nfunction EventHandler.Events.GUILD_UPDATE(Client, Data)\r\n    ReMap(Client:GetGuild(Data.id), Data)\r\n    Client:emit(\"GuildUpdate\")\r\nend\r\n\r\nfunction EventHandler.Events.GUILD_ROLE_UPDATE(Client, Data)\r\n   Client:GetGuild(Data.guild_id):GetRole(Data.role.id):Update(Data.role)\r\n   Client:emit(\"RoleUpdate\", Client:GetGuild(Data.guild_id):GetRole(Data.role.id))\r\nend\r\n\r\nfunction EventHandler:HandleEvent(Message)\r\n    self.Gateway.Sequence = Message.s or self.Gateway.Sequence\r\n\r\n    if Message.op == 0 then\r\n        if self.Events[Message.t] then\r\n            self.Events[Message.t](self.Client, Message.d)\r\n        else\r\n            self.Client.Logger:Warn(string.format(\"Unhandled gateway event '%s'\", Message.t))\r\n        end\r\n    elseif Message.op == 10 then\r\n        self.Client.Logger:Info(\"Received Hello\")\r\n        self.Client:emit(\"Hello\")\r\n    elseif Message.op == 11 then\r\n        self.Gateway.HeartInfo.Returned = true\r\n        self.Client:emit(\"HeartBeatAck\")\r\n    end\r\nend\r\n\r\nreturn EventHandler",
    "ga.duacord.duacord.Classes.Message":"local Message = Class:extend()\r\nlocal ReMap = Import(\"ga.duacord.duacord.API.ReMap\")\r\n\r\nlocal HttpConstant = Import(\"ga.duacord.duacord.Constants.HTTP\")\r\n\r\nMessage.ClassMap = {\r\n    [\"Id\"] = \"id\",\r\n    [\"Type\"] = \"type\",\r\n    [\"Guild_id\"] = \"guild_id\",\r\n    [\"Position\"] = \"position\",\r\n    [\"Permission_overwrites\"] = \"permission_overwrites\",\r\n    [\"Name\"] = \"name\",\r\n    [\"Topic\"] = \"topic\",\r\n    [\"Nsfw\"] = \"nsfw\",\r\n    [\"Last_message_id\"] = \"last_message_id\",\r\n    [\"Bitrate\"] = \"bitrate\",\r\n    [\"User_limit\"] = \"user_limit\",\r\n    [\"Rate_limit_per_user\"] = \"rate_limit_per_user\",\r\n    [\"Recipients\"] = \"recipients\",\r\n    [\"Icon\"] = \"icon\",\r\n    [\"Owner_id\"] = \"owner_id\",\r\n    [\"Application_id\"] = \"application_id\",\r\n    [\"Parent_id\"] = \"parent_id\",\r\n    [\"Last_pin_timestamp\"] = \"last_pin_timestamp\",\r\n    [\"Rtc_region\"] = \"rtc_region\",\r\n    [\"Video_quality_mode\"] = \"video_quality_mode\",\r\n    [\"Message_count\"] = \"message_count\",\r\n    [\"Member_count\"] = \"member_count\",\r\n    [\"Thread_metadata\"] = \"thread_metadata\",\r\n    [\"Member\"] = \"member\",\r\n    [\"Default_auto_archive_duration\"] = \"default_auto_archive_duration\",\r\n    [\"Permissions\"] = \"permissions\",\r\n}\r\n\r\nfunction Message:initialize(Data, Guild)\r\n    self.Guild = Guild\r\n    self.Client = Guild.Client\r\n\r\n    ReMap(self, Data)\r\n\r\nend\r\n\r\nfunction Message:Edit(Data, AuditReason)\r\n    Data = Data or {}\r\n\r\n    local Response, Body = self.Guild.Client.API:Request(\r\n        \"PATCH\",\r\n        HttpConstant.BASEURL .. string.format(HttpConstant.EndPoints.CHANNEL, self.Id),\r\n        Data,\r\n        AuditReason\r\n    )\r\n\r\n    return Response.code == 200, Body.message\r\nend\r\n\r\n\r\n\r\n\r\nreturn Message",
    "ga.duacord.duacord.Libraries.TableToString":"return function(val, name, skipnewlines, depth)\r\n    skipnewlines = skipnewlines or false\r\n    depth = depth or 0\r\n\r\n    local tmp = string.rep(\" \", depth)\r\n\r\n    if name then tmp = tmp .. name .. \" = \" end\r\n\r\n    if type(val) == \"table\" then\r\n        tmp = tmp .. \"{\" .. (not skipnewlines and \"\\n\" or \"\")\r\n\r\n        for k, v in pairs(val) do\r\n            tmp =  tmp .. require(\"./TableToString\")(v, k, skipnewlines, depth + 1) .. \",\" .. (not skipnewlines and \"\\n\" or \"\")\r\n        end\r\n\r\n        tmp = tmp .. string.rep(\" \", depth) .. \"}\"\r\n    elseif type(val) == \"number\" then\r\n        tmp = tmp .. tostring(val)\r\n    elseif type(val) == \"string\" then\r\n        tmp = tmp .. string.format(\"%q\", val)\r\n    elseif type(val) == \"boolean\" then\r\n        tmp = tmp .. (val and \"true\" or \"false\")\r\n    else\r\n        tmp = tmp .. \"\\\"[inserializeable datatype:\" .. type(val) .. \"]\\\"\"\r\n    end\r\n\r\n    return tmp\r\nend",
    "ga.duacord.duacord.Client.Gateway":"local Gateway = Class:extend()\r\nlocal HttpHelper = Import(\"ga.duacord.http.Main\")\r\nlocal WebSocket = HttpHelper[\"coro-websocket\"]\r\nlocal WebRequest = HttpHelper[\"coro-http\"].request\r\nlocal EventHandler = Import(\"ga.duacord.duacord.Client.EventHandler\")\r\n\r\nlocal HttpConstant = Import(\"ga.duacord.duacord.Constants.HTTP\")\r\n\r\nfunction Gateway:initialize(GatewayClient)\r\n    self.Client = GatewayClient\r\n    self.EventHandler = EventHandler:new(self)\r\n    self.HeartInfo = {Returned = true}\r\nend\r\n\r\nfunction GetConnection(Url, Path)\r\n    local Options = WebSocket.parseUrl(Url)\r\n    Options.pathname = Path\r\n    \r\n    return WebSocket.connect(Options)\r\nend\r\n\r\nfunction Gateway:Connect()\r\n\r\n    self.Client.Logger:Info(\"Connecting to discord!\")\r\n\r\n    local Response, Body = WebRequest(\r\n        \"GET\",\r\n        HttpConstant.BASEURL .. HttpConstant.GATEWAY_BOT,\r\n        {\r\n            {\"Authorization\", self.Client.Token}\r\n        }\r\n    )\r\n\r\n    self.SocketData = Json.decode(Body)\r\n\r\n    local Response, Read, Write = GetConnection(self.SocketData.url, \"/?v=9&encoding=json\")\r\n\r\n    self.SocketConnection = {--[[Response = Response, ]]Read = Read, Write = Write}\r\n\r\n    self.HeartInfo.SendHeartBeat = function()\r\n        if self.HeartInfo.Returned == false then\r\n            self.Client.Logger:Warn(\"Connection might be ghosted (\" .. self.Sequence .. \")\")\r\n            \r\n        end\r\n        self.SocketConnection.Write(\r\n            {\r\n               payload = Json.encode(\r\n                    {\r\n                        op = 1,\r\n                        d = Json.null\r\n                    }\r\n                ) \r\n            }\r\n            \r\n        )\r\n\r\n\r\n        self.HeartInfo.Returned = false\r\n    end\r\n\r\n    self.HeartInfo.Heart = coroutine.wrap(function()\r\n        self.Client.Logger:Info(string.format(\"Starting Heart (Speed set to %s seconds)\", self.HeartInfo.HeartSpeed / 1000))\r\n        self.HeartInfo.SendHeartBeat()\r\n\r\n        self.SocketConnection.Write({payload = Json.encode({\r\n            op = 2, d = {\r\n                token = self.Client.Token,\r\n                properties = {\r\n                    [\"$os\"] = LOS.type(),\r\n                    [\"$browser\"] = \"DuaCord\",\r\n                    [\"$device\"] = \"DuaCord\"\r\n                },\r\n                large_threshold = 250,\r\n                presence = {\r\n                    activities = {\r\n                        {\r\n                            name = \"Cards Against Humanity\",\r\n                            type = 0\r\n                        }\r\n                    },\r\n                    status = \"dnd\",\r\n                    since = 91879201,\r\n                    afk = false\r\n                },\r\n                intents = self.Client.Settings.Intents\r\n        }})})\r\n\r\n        while true do\r\n            Sleep(self.HeartInfo.HeartSpeed)\r\n            self.HeartInfo.SendHeartBeat()\r\n        end\r\n    end)\r\n\r\n\r\n    while true do\r\n        local Message = Read()\r\n        \r\n        if Message and string.sub(Message.payload, 1, 1) == \"{\" then\r\n\r\n            local Decoded = Json.decode(Message.payload)\r\n\r\n            self.EventHandler:HandleEvent(Decoded)\r\n\r\n            if Decoded.op == 10 and not self.HeartSpeed then\r\n                self.HeartInfo.HeartSpeed = Decoded.d[\"heartbeat_interval\"]\r\n                self.HeartInfo.Heart()\r\n            elseif Decoded.op == 10 then\r\n                self.HeartInfo.Heart()\r\n            end\r\n\r\n        else\r\n\r\n        end\r\n\r\n    end\r\n\r\nend\r\n\r\nreturn Gateway",
    "ga.duacord.duacord.Classes.Role":"local Role = Class:extend()\r\nlocal ReMap = Import(\"ga.duacord.duacord.API.ReMap\")\r\n\r\nlocal HttpConstant = Import(\"ga.duacord.duacord.Constants.HTTP\")\r\n\r\nRole.ClassMap = {\r\n    [\"Id\"] = \"id\",\r\n    [\"Name\"] = \"name\",\r\n    [\"Color\"] = \"color\",\r\n    [\"Hoist\"] = \"Hoist\",\r\n    [\"Icon\"] = \"icon\",\r\n    [\"UnicodeEmoji\"] = \"unicode_emoji\",\r\n    [\"Position\"] = \"position\",\r\n    [\"Permissions\"] = \"permissions\",\r\n    [\"Managed\"] = \"managed\",\r\n    [\"Mentionable\"] = \"mentionable\",\r\n    [\"Tags\"] = \"tags\",\r\n}\r\n\r\nfunction Role:initialize(Data, Guild)\r\n    self.Guild = Guild\r\n    self.Client = self.Guild.Client\r\n\r\n    ReMap(self, Data, false)\r\nend\r\n\r\nfunction Role.meta:__tostring()\r\n    return \"Role: \" .. self.Id .. \" (\" .. self.Name .. \")\"\r\nend\r\n\r\nfunction Role:Update(Data)\r\n    self.Id = Data.id\r\n    self.Name = Data.name\r\n    self.Color = Data.color\r\n    self.Hoist = Data.Hoist\r\n    self.Icon = Data.icon\r\n    self.UnicodeEmoji = Data.unicode_emoji\r\n    self.Position = Data.position\r\n    self.Permissions = Data.permissions\r\n    self.Managed = Data.managed\r\n    self.Mentionable = Data.mentionable\r\n    self.Tags = Data.tags\r\nend\r\n\r\nfunction Role:Edit(Data, AuditReason)\r\n    Data = Data or {}\r\n\r\n    local Response, Body = self.Guild.Client.API:Request(\r\n        \"PATCH\",\r\n        HttpConstant.BASEURL .. string.format(HttpConstant.EndPoints.GUILD_ROLE, self.Guild.Id, self.Id),\r\n        Data,\r\n        AuditReason\r\n    )\r\n\r\n    return Response.code == 200, Body.message\r\nend\r\n\r\nfunction Role:Delete(Reason)\r\n    local Response, Body = self.Guild.Client.API:Request(\r\n        \"DELETE\",\r\n        HttpConstant.BASEURL .. string.format(HttpConstant.EndPoints.GUILD_ROLE, self.Guild.Id, self.Id),\r\n        {},\r\n        Reason\r\n    )\r\n\r\n    Body = Body or {}\r\n    return Response.code == 204, Body.message\r\n\r\nend\r\n\r\nfunction Role:SetMentioning(Enable, Reason)\r\n    return self:Edit({mentionable = Enable}, Reason)\r\nend\r\n\r\nfunction Role:SetHoist(Enable, Reason)\r\n    return self:Edit({hoist = Enable}, Reason)\r\nend\r\n\r\n\r\nfunction Role:SetColor(Color, Reason)\r\n    return self:Edit({color = Color}, Reason)\r\nend\r\n\r\nfunction Role:SetName(Name, Reason)\r\n    return self:Edit({name = Name}, Reason)\r\nend\r\n\r\n\r\n\r\nreturn Role ",
    "ga.duacord.duacord.Main":"\r\n\r\nreturn {\r\n  Client = Import(\"ga.duacord.duacord.Client.Client\")\r\n}",
    "ga.duacord.duacord.Classes.User":"local User = Class:extend()\r\nlocal ReMap = Import(\"ga.duacord.duacord.API.ReMap\")\r\n\r\nlocal HttpConstant = Import(\"ga.duacord.duacord.Constants.HTTP\")\r\n\r\nUser.ClassMap = {\r\n    [\"Id\"]              = \"id\",\r\n    [\"Username\"]        = \"username\",\r\n    [\"Discriminator\"]   = \"discriminator\",\r\n    [\"Avatar\"]          = \"avatar\",\r\n    [\"Bot\"]             = \"bot\",\r\n    [\"System\"]          = \"system\",\r\n    [\"MfaEnabled\"]      = \"mfa_enabled\",\r\n    [\"Banner\"]          = \"banner\",\r\n    [\"AccentColor\"]     = \"accent_color\",\r\n    [\"Locale\"]          = \"locale\",\r\n    [\"Flags\"]           = \"flags\",\r\n    [\"PremiumType\"]     = \"premium_type\",\r\n    [\"PublicFlags\"]     = \"public_flags\",\r\n}\r\n\r\nfunction User:initialize(Data, Member)\r\n    self.Member = Member\r\n    self.Client = self.Member.Client\r\n\r\n    ReMap(self, Data)\r\nend\r\n\r\nfunction User:Edit(Data, AuditReason)\r\n    Data = Data or {}\r\n\r\n    local Response, Body = self.Guild.Client.API:Request(\r\n        \"PATCH\",\r\n        HttpConstant.BASEURL .. string.format(HttpConstant.EndPoints.GUILD_MEMBER, self.Guild.Id, self.Id),\r\n        Data,\r\n        AuditReason\r\n    )\r\n\r\n    return Response.code == 200, Body.message\r\nend\r\n\r\n\r\nreturn User ",
    "ga.duacord.duacord.Classes.Channel":"local Channel = Class:extend()\r\nlocal ReMap = Import(\"ga.duacord.duacord.API.ReMap\")\r\nlocal HttpConstant = Import(\"ga.duacord.duacord.Constants.HTTP\")\r\n\r\nChannel.ClassMap = {\r\n    [\"Id\"]                              = \"id\",\r\n    [\"Type\"]                            = \"type\",\r\n    [\"Position\"]                        = \"position\",\r\n    [\"PermissionOverwrites\"]            = \"permission_overwrites\",\r\n    [\"Name\"]                            = \"name\",\r\n    [\"Topic\"]                           = \"topic\",\r\n    [\"Nsfw\"]                            = \"nsfw\",\r\n    [\"LastMessageId\"]                   = \"last_message_id\",\r\n    [\"Bitrate\"]                         = \"bitrate\",\r\n    [\"UserLimit\"]                       = \"user_limit\",\r\n    [\"RateLimitPerUser\"]                = \"rate_limit_per_user\",\r\n    [\"Recipients\"]                      = \"recipients\",\r\n    [\"Icon\"]                            = \"icon\",\r\n    [\"OwnerId\"]                         = \"owner_id\",\r\n    [\"ApplicationId\"]                   = \"application_id\",\r\n    [\"ParentId\"]                        = \"parent_id\",\r\n    [\"LastPinTimestamp\"]                = \"last_pin_timestamp\",\r\n    [\"RtcRegion\"]                       = \"rtc_region\",\r\n    [\"VideoQualityMode\"]                = \"video_quality_mode\",\r\n    [\"MessageCount\"]                    = \"message_count\",\r\n    [\"MemberCount\"]                     = \"member_count\",\r\n    [\"ThreadMetadata\"]                  = \"thread_metadata\",\r\n    [\"Member\"]                          = \"member\",\r\n    [\"DefaultAutoArchiveDuration\"]      = \"default_auto_archive_duration\",\r\n    [\"Permissions\"]                     = \"permissions\",\r\n}\r\n\r\nfunction Channel:initialize(Data, Guild)\r\n    self.Guild = Guild\r\n    ReMap(self, Data)\r\n\r\n\r\n    \r\n\r\nend\r\n\r\nfunction Channel:Edit(Data, AuditReason)\r\n    Data = Data or {}\r\n\r\n    local Response, Body = self.Guild.Client.API:Request(\r\n        \"PATCH\",\r\n        HttpConstant.BASEURL .. string.format(HttpConstant.EndPoints.CHANNEL, self.Id),\r\n        Data,\r\n        AuditReason\r\n    )\r\n\r\n    return Response.code == 200, Body.message\r\nend\r\n\r\nfunction Channel:SetTopic(Name, AuditReason)\r\n    return self:Edit({topic = Name})\r\nend\r\n\r\nfunction Channel:SetName(Name, AuditReason)\r\n    return self:Edit({name = Name})\r\nend\r\n\r\nfunction Channel:Send(Data)\r\n    local Response, Body = self.Guild.Client.API:Request(\r\n        \"POST\",\r\n        HttpConstant.BASEURL .. string.format(HttpConstant.EndPoints.CHANNEL_MESSAGES, self.Id),\r\n        Data\r\n    )\r\n\r\n    return Response.code == 200, Body.message\r\nend\r\n\r\n\r\nreturn Channel ",
    "ga.duacord.duacord.Test":"local Package = {}\r\n\r\nlocal Token = FS.readFileSync(RuntimeLocation .. \"Token\")\r\n\r\nfunction Package.OnInitialize()\r\n    local Logger = Import(\"nl.cubic-inc.logger.Main\"):new()\r\n    local Client = Import(\"ga.duacord.duacord.Main\").Client:new()\r\n\r\n    Logger:Info(\"Package loaded!\")\r\n\r\n    Client:on(\"Loaded\", function()\r\n        local Guild = Client:GetGuild(\"783625199702245436\")\r\n        local Channel = Guild:GetChannel(\"783731240138047529\")\r\n    \r\n        ---p(\r\n        ---    Channel:Send(\r\n        ---        {\r\n        ---            content = \"Hello\"\r\n        ---        }\r\n        ---    )\r\n        ---)\r\n\r\n    --for i, v in pairs(Client.User) do print(i, v) end\r\n    end)\r\n\r\n    Client:Run(Token, {Debug = true})\r\n\r\nend\r\n\r\nreturn Package",
    "ga.duacord.duacord.Constants.Endpoints":"return {\r\n\tCHANNEL                       = \"/channels/%s\",\r\n\tCHANNEL_INVITES               = \"/channels/%s/invites\",\r\n\tCHANNEL_MESSAGE               = \"/channels/%s/messages/%s\",\r\n\tCHANNEL_MESSAGES              = \"/channels/%s/messages\",\r\n\tCHANNEL_MESSAGES_BULK_DELETE  = \"/channels/%s/messages/bulk-delete\",\r\n\tCHANNEL_MESSAGE_REACTION      = \"/channels/%s/messages/%s/reactions/%s\",\r\n\tCHANNEL_MESSAGE_REACTIONS     = \"/channels/%s/messages/%s/reactions\",\r\n\tCHANNEL_MESSAGE_REACTION_ME   = \"/channels/%s/messages/%s/reactions/%s/@me\",\r\n\tCHANNEL_MESSAGE_REACTION_USER = \"/channels/%s/messages/%s/reactions/%s/%s\",\r\n\tCHANNEL_PERMISSION            = \"/channels/%s/permissions/%s\",\r\n\tCHANNEL_PIN                   = \"/channels/%s/pins/%s\",\r\n\tCHANNEL_PINS                  = \"/channels/%s/pins\",\r\n\tCHANNEL_RECIPIENT             = \"/channels/%s/recipients/%s\",\r\n\tCHANNEL_TYPING                = \"/channels/%s/typing\",\r\n\tCHANNEL_WEBHOOKS              = \"/channels/%s/webhooks\",\r\n\tGATEWAY                       = \"/gateway\",\r\n\tGATEWAY_BOT                   = \"/gateway/bot\",\r\n\tGUILD                         = \"/guilds/%s\",\r\n\tGUILDS                        = \"/guilds\",\r\n\tGUILD_AUDIT_LOGS              = \"/guilds/%s/audit-logs\",\r\n\tGUILD_BAN                     = \"/guilds/%s/bans/%s\",\r\n\tGUILD_BANS                    = \"/guilds/%s/bans\",\r\n\tGUILD_CHANNELS                = \"/guilds/%s/channels\",\r\n\tGUILD_EMBED                   = \"/guilds/%s/embed\",\r\n\tGUILD_EMOJI                   = \"/guilds/%s/emojis/%s\",\r\n\tGUILD_EMOJIS                  = \"/guilds/%s/emojis\",\r\n\tGUILD_INTEGRATION             = \"/guilds/%s/integrations/%s\",\r\n\tGUILD_INTEGRATIONS            = \"/guilds/%s/integrations\",\r\n\tGUILD_INTEGRATION_SYNC        = \"/guilds/%s/integrations/%s/sync\",\r\n\tGUILD_INVITES                 = \"/guilds/%s/invites\",\r\n\tGUILD_MEMBER                  = \"/guilds/%s/members/%s\",\r\n\tGUILD_MEMBERS                 = \"/guilds/%s/members\",\r\n\tGUILD_MEMBER_ME_NICK          = \"/guilds/%s/members/@me/nick\",\r\n\tGUILD_MEMBER_ROLE             = \"/guilds/%s/members/%s/roles/%s\",\r\n\tGUILD_PRUNE                   = \"/guilds/%s/prune\",\r\n\tGUILD_REGIONS                 = \"/guilds/%s/regions\",\r\n\tGUILD_ROLE                    = \"/guilds/%s/roles/%s\",\r\n\tGUILD_ROLES                   = \"/guilds/%s/roles\",\r\n\tGUILD_WEBHOOKS                = \"/guilds/%s/webhooks\",\r\n\tINVITE                        = \"/invites/%s\",\r\n\tOAUTH2_APPLICATION_ME         = \"/oauth2/applications/@me\",\r\n\tUSER                          = \"/users/%s\",\r\n\tUSER_ME                       = \"/users/@me\",\r\n\tUSER_ME_CHANNELS              = \"/users/@me/channels\",\r\n\tUSER_ME_CONNECTIONS           = \"/users/@me/connections\",\r\n\tUSER_ME_GUILD                 = \"/users/@me/guilds/%s\",\r\n\tUSER_ME_GUILDS                = \"/users/@me/guilds\",\r\n\tVOICE_REGIONS                 = \"/voice/regions\",\r\n\tWEBHOOK                       = \"/webhooks/%s\",\r\n\tWEBHOOK_TOKEN                 = \"/webhooks/%s/%s\",\r\n\tWEBHOOK_TOKEN_GITHUB          = \"/webhooks/%s/%s/github\",\r\n\tWEBHOOK_TOKEN_SLACK           = \"/webhooks/%s/%s/slack\",\r\n}",
    "ga.duacord.duacord.OnLoad":"LoadPackage(\"./Libraries/Http.dua\")\r\nLoadPackage(\"./Libraries/Logger.dua\")\r\n",
    "ga.duacord.duacord.API.Request":"local Http = Import(\"ga.duacord.http.Main\")\r\n\r\nreturn function(Method, Url, Body, AuditReason, Client)\r\n\r\n    local Response, Body = Http[\"coro-http\"].request(\r\n        Method,\r\n        Url,\r\n        {\r\n            Client.AuthHeader,\r\n            {\"X-Audit-Log-Reason\", AuditReason},\r\n            {\"User-Agent\", \"Duacord Library\"},\r\n            {\"Content-Type\", \"application/json\"}\r\n        },\r\n        Json.encode(Body)\r\n    )\r\n\r\n    return Response, Json.decode(Body)\r\n\r\nend",
    "ga.duacord.duacord.Classes.Guild":"local Guild = Class:extend()\r\n\r\nGuild.ClassMap = {\r\n    [\"Id\"]                              = \"id\",\r\n    [\"Name\"]                            = \"name\",\r\n    [\"Icon\"]                            = \"icon\",\r\n    [\"IconHash\"]                        = \"icon_hash\",\r\n    [\"Splash\"]                          = \"splash\",\r\n    [\"DiscoverySplash\"]                 = \"discovery_splash\",\r\n    [\"Owner\"]                           = \"owner\",\r\n    [\"OwnerId\"]                         = \"owner_id\",\r\n    [\"Permissions\"]                     = \"permissions\",\r\n    [\"AfkChannelId\"]                    = \"afk_channel_id\",\r\n    [\"AfkTimeout\"]                      = \"afk_timeout\",\r\n    [\"WidgetEnabled\"]                   = \"widget_enabled\",\r\n    [\"WidgetChannelId\"]                 = \"widget_channel_id\",\r\n    [\"VerificationLevel\"]               = \"verification_level\",\r\n    [\"DefaultMessageNotifications\"]     = \"default_message_notifications\",\r\n    [\"ExplicitContentFilter\"]           = \"explicit_content_filter\",\r\n    [\"Emojis\"]                          = \"emojis\",\r\n    [\"Features\"]                        = \"features\",\r\n    [\"MfaLevel\"]                        = \"mfa_level\",\r\n    [\"SystemChannelId\"]                 = \"system_channel_id\",\r\n    [\"SystemChannelFlags\"]              = \"system_channel_flags\",\r\n    [\"RulesChannelId\"]                  = \"rules_channel_id\",\r\n    [\"JoinedAt\"]                        = \"joined_at\",\r\n    [\"Large\"]                           = \"large\",\r\n    [\"Unavailable\"]                     = \"unavailable\",\r\n    [\"MemberCount\"]                     = \"member_count\",\r\n    [\"VoiceStates\"]                     = \"voice_states\",\r\n    [\"Threads\"]                         = \"threads\",\r\n    [\"Presences\"]                       = \"presences\",\r\n    [\"MaxPresences\"]                    = \"max_presences\",\r\n    [\"MaxMembers\"]                      = \"max_members\",\r\n    [\"VanityUrlCode\"]                   = \"vanity_url_code\",\r\n    [\"Description\"]                     = \"description\",\r\n    [\"Banner\"]                          = \"banner\",\r\n    [\"PremiumTier\"]                     = \"premium_tier\",\r\n    [\"PremiumSubscriptionCount\"]        = \"premium_subscription_count\",\r\n    [\"PreferredLocale\"]                 = \"preferred_locale\",\r\n    [\"PublicUpdatesChannelId\"]          = \"public_updates_channel_id\",\r\n    [\"MaxVideoChannelUsers\"]            = \"max_video_channel_users\",\r\n    [\"WelcomeScreen\"]                   = \"welcome_screen\",\r\n    [\"NsfwLevel\"]                       = \"nsfw_level\",\r\n    [\"StageInstances\"]                  = \"stage_instances\",\r\n    [\"Stickers\"]                        = \"stickers\",\r\n}\r\n\r\nfunction Guild:initialize(Data, Client)\r\n\r\n    self.Client = Client\r\n\r\n    local Role = self.Client.Classes.Classes.Role\r\n    local Member = self.Client.Classes.Classes.Member\r\n    local Channel = self.Client.Classes.Classes.Channel\r\n\r\n\r\n    Import(\"ga.duacord.duacord.API.ReMap\")(self, Data)\r\n\r\n\r\n    self.Roles = {}\r\n    for Index, NewRole in pairs(Data.roles) do\r\n        self.Roles[NewRole.id] = Role:new(NewRole, self)\r\n    end\r\n\r\n    self.Members = {}\r\n    for Index, NewMember in pairs(Data.members) do\r\n        self.Members[NewMember.user.id] = Member:new(NewMember, self)\r\n    end\r\n\r\n    self.Channels = {} \r\n    for Index, NewChannel in pairs(Data.channels) do\r\n        self.Channels[NewChannel.id] = Channel:new(NewChannel, self)\r\n    end\r\n\r\nend\r\n\r\nfunction Guild.meta:__tostring()\r\n    return \"Guild: \" .. self.Id .. \" (\" .. self.Name .. \")\"\r\nend\r\n\r\nfunction Guild:GetRole(Id)\r\n    return self.Roles[Id]\r\nend\r\n\r\nfunction Guild:GetMember(Id)\r\n    return self.Members[Id]\r\nend\r\n\r\nfunction Guild:GetChannel(Id)\r\n    return self.Channels[Id]\r\nend\r\n\r\nreturn Guild",
    "ga.duacord.duacord.API.API":"local API = Class:extend()\r\n\r\nlocal Request = Import(\"ga.duacord.duacord.API.Request\")\r\n\r\n\r\nfunction API:initialize(Client)\r\n    self.Client = Client\r\nend\r\n\r\nfunction API:Request(Method, Url, Body, AuditReason)\r\n    return Request(Method, Url, Body, AuditReason, self.Client)\r\nend\r\n\r\n\r\nreturn API",
    "ga.duacord.duacord.Constants.HTTP":"return {\r\n    BASEURL = \"https://discord.com/api\",\r\n\r\n    GATEWAY_BOT = \"/gateway/bot\",\r\n\r\n    EndPoints = Import(\"ga.duacord.duacord.Constants.Endpoints\")\r\n\r\n}",
    "ga.duacord.duacord.Client.Client":"local Client = Class:extend()\r\nlocal Gateway = Import(\"ga.duacord.duacord.Client.Gateway\")\r\nlocal Logger = Import(\"nl.cubic-inc.logger.Main\")\r\nlocal API = Import(\"ga.duacord.duacord.API.API\")\r\n\r\n\r\nlocal DefaultSettings = {\r\n    Intents = 32767,\r\n    Debug = false\r\n}\r\n\r\nfunction ParseSettings(Settings)\r\n    local ParsedSettings = {}\r\n    for Index, Setting in pairs(DefaultSettings) do\r\n        ParsedSettings[Index] = Settings[Index] or Setting\r\n    end\r\n    return ParsedSettings\r\nend\r\n\r\nfunction Client:initialize()\r\n    \r\n\r\n    self.Classes = {\r\n        Client = {\r\n            EventHandler = Import(\"ga.duacord.duacord.Client.EventHandler\"),\r\n            Gateway = Import(\"ga.duacord.duacord.Client.Gateway\")\r\n        },\r\n\r\n        Constants = {\r\n            EndPoints = Import(\"ga.duacord.duacord.Constants.Endpoints\"),\r\n            HTTP = Import(\"ga.duacord.duacord.Constants.HTTP\"),\r\n        },\r\n\r\n        Classes = {\r\n            Channel = Import(\"ga.duacord.duacord.Classes.Channel\"),\r\n            Guild = Import(\"ga.duacord.duacord.Classes.Guild\"),\r\n            Member = Import(\"ga.duacord.duacord.Classes.Member\"),\r\n            Role = Import(\"ga.duacord.duacord.Classes.Role\"),\r\n            User = Import(\"ga.duacord.duacord.Classes.User\"),\r\n        }\r\n    }\r\nend\r\n\r\nfunction Client.meta:__tostring()\r\n    return \"Client: \" .. ((self.User or {}).Id or \"Client is loading\") .. string.format(\" (%s)\", (self.User or {}).Name or \"Client is loading\")\r\nend\r\n\r\nfunction Client:Run(Token, Settings)\r\n    local ConnectionToken = (\"Bot \") .. Token\r\n    \r\n    self.Token = ConnectionToken\r\n    self.API = API:new(self)\r\n    self.AuthHeader = {\"Authorization\", self.Token}\r\n    self.Gateway = Gateway:new(self)\r\n    self.Settings = ParseSettings(Settings or {})\r\n    self.Logger = Logger:new({Debug = self.Settings.Debug})\r\n    self.Logger:Info(\"Duacord discord library\")\r\n    self.Guilds = {}\r\n\r\n    coroutine.wrap(function()\r\n        self.Gateway:Connect()\r\n    end)()\r\n\r\nend\r\n\r\nfunction Client:GetGuild(Id)\r\n    return self.Guilds[Id]\r\nend\r\n\r\nreturn Client"
  },
  "PackageInfo":{
    "Author":{
      "Contributors":[],
      "Developers":["CoreByte"]
    },
    "Icon":"",
    "Environment":"*",
    "Name":"DuaCord-Main",
    "Entrypoints":{
      "OnLoad":"ga.duacord.duacord.OnLoad",
      "Main":"ga.duacord.duacord.Test"
    },
    "InfoVersion":1,
    "Dependencies":{
      "Luvit":[],
      "Dua":[]
    },
    "Version":"0.0.1",
    "ID":"DuaCord-Main",
    "Contact":{
      "Source":"https://github.com/DuaCord/DuaCord-Main",
      "Socials":[],
      "Website":"http://duacord.ga"
    },
    "Description":"The Main DuaCord Package"
  }
}